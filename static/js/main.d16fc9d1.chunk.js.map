{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","WETHER_API_URL","URL_PARAMETER_APPID","URL_PARAMETER_LOCATION","URL_PARAMETER_UNITS","DEFAULT_UNITS","App","state","undefined","e","a","async","preventDefault","target","elements","value","fetch","api_call","json","data","message","setState","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d16fc9d1.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Titles = () => (\n    <div>\n        <h1 className=\"title-container__title\">Weahther Finder</h1>\n        <h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\n    </div>\n);\n\nexport default Titles;","import React from \"react\";\n\nconst Form = props => (\n    <form onSubmit={props.getWeather}>\n        <input type=\"text\" name=\"city\" placeholder=\"city...\" />\n        <input type=\"text\" name=\"country\" placeholder=\"country...\" />\n        <button>Get Weather</button>\n    </form>\n);\n\nexport default Form;","import React from \"react\";\n\nconst Weather = props => (\n    <div>\n        { \n        props.city && props.country && <p className=\"weather__key\">Location: \n            <span className=\"weather__value\"> {props.city}, {props.country}</span>\n            </p> \n        }\n        { \n        props.temperature && <p className=\"weather__key\">Temperature: \n            <span className=\"weather__value\"> {props.temperature}</span>\n            </p> \n        }\n        { \n        props.humidity && <p className=\"weather__key\">Humidity: \n            <span className=\"weather__value\"> {props.humidity}</span>\n            </p>\n        }\n        { \n        props.description && <p className=\"weather__key\">Description: \n            <span className=\"weather__value\"> {props.description}</span>\n            </p> \n        }\n        { \n        props.error && <p className=\"weather__error\">{props.error}</p>\n        }\n    </div>\n);\n\nexport default Weather;","import React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from './components/Weather'\n\nconst API_KEY = \"dc50362f421145039e0d43b7627ffaca\";\nconst WETHER_API_URL = \"http://api.openweathermap.org/data/2.5/weather\";\nconst URL_PARAMETER_APPID = \"appid\";\nconst URL_PARAMETER_LOCATION = \"q\";\nconst URL_PARAMETER_UNITS = \"units\";\nconst DEFAULT_UNITS = \"metric\";\n\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(`${WETHER_API_URL}?${URL_PARAMETER_LOCATION}=${city},${country}\n      &${URL_PARAMETER_APPID}=${API_KEY}&${URL_PARAMETER_UNITS}=${DEFAULT_UNITS}`);\n    const data = await api_call.json();\n\n    if (city && country) {\n\n      if (data.message) {\n\n        this.setState({\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: data.message\n        });\n\n      } else {\n\n        this.setState({\n          temperature: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          error: \"\"\n        });\n\n      }\n    } else {\n\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the values :)\"\n      });\n\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather}/>\n                  <Weather temperature = {this.state.temperature}\n                    city = {this.state.city}\n                    country = {this.state.country}\n                    humidity = {this.state.humidity}\n                    description = {this.state.description}\n                    error = {this.state.error}/>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}